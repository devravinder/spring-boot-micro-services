
// extra properties
ext {
    springdocOpenApiVersion = '2.7.0'
    spotlessVersion = '2.43.0'
    dockerImageName = "devravinder/bookstore-${project.name}:${project.version}"
}
bootBuildImage {
    imageName = dockerImageName
    //    builder = 'dashaun/builder:tiny'
    //    builder = "paketobuildpacks/builder:base"      // Use Paketo base builder ( small base )

    /*
    // to publish to docker hub
    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryPassword")
            url = project.findProperty("registryUrl")
        }
    }

    */

}
dependencies {

    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'



    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'


    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'io.rest-assured:rest-assured'


    developmentOnly 'org.springframework.boot:spring-boot-devtools'


}
compileJava {
    options.compilerArgs += [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.defaultComponentModel=spring'
    ]
}
