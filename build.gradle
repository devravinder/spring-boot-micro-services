plugins {
    id 'java'
    id 'com.diffplug.spotless' version '7.0.0.BETA4'
    id 'io.github.simulatan.gradle-buildinfo-plugin' version '2.3.1'
    id 'com.gorylenko.gradle-git-properties' version '2.4.2'
    alias(libs.plugins.springBoot) apply false
    alias(libs.plugins.springManagement) apply false
}


allprojects {
    group = 'com.paravar'
    version = project.hasProperty('BUILD_SOURCEVERSION') ?
            project.property('BUILD_SOURCEVERSION') :
            System.getenv('BUILD_SOURCEVERSION') ?: '0.0.1-SNAPSHOT'

    // Debug final version
    println "Final version set to: ${version}"
}


subprojects { Project sub ->
        apply plugin: 'java'
        apply plugin: 'io.spring.dependency-management'
        apply plugin: 'org.springframework.boot'
        apply plugin: 'com.diffplug.spotless'
        apply plugin: 'io.github.simulatan.gradle-buildinfo-plugin'
        apply plugin: 'com.gorylenko.gradle-git-properties'


        repositories {
            mavenCentral()
        }

        dependencies {

            compileOnly 'org.projectlombok:lombok'
            annotationProcessor 'org.projectlombok:lombok'
            annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
            testImplementation 'org.springframework.boot:spring-boot-starter-test'
            testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        }

        configurations {
            compileOnly {
                extendsFrom annotationProcessor
            }
        }

        test {
            useJUnitPlatform()
            testLogging {
                events = ["PASSED", "FAILED", "SKIPPED"]
                showStandardStreams = true
                exceptionFormat = "full"
            }
        }

        spotless {
            java {
                cleanthat()
                importOrder()
                removeUnusedImports()
                palantirJavaFormat()
                formatAnnotations()
                trimTrailingWhitespace()
                endWithNewline()
            }
        }

//     to generate build info
        springBoot {
            buildInfo()

        }
//    to get git properties
        gitProperties {
            keys = ['git.branch','git.commit.user.name', 'git.commit.id', 'git.commit.time']
        }

        java {
            toolchain {
                languageVersion = JavaLanguageVersion.of(23)
            }
        }

}

tasks.register('spotlessApplyAll') {
    dependsOn(subprojects.collect { it.tasks.named('spotlessApply') })
}

tasks.register('spotlessCheckAll') {
    dependsOn(subprojects.collect { it.tasks.named('spotlessCheck') })
}
